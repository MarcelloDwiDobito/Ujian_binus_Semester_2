#include <iostream>
#include <string>
using namespace std;

struct Book {
    int id;
    string title;
    string author;
    string category;
    int year;
    int copies;
};

struct AVLNode {
    Book data;
    AVLNode* left;
    AVLNode* right;
    int height;
};

// Fungsi untuk mendapatkan tinggi dari node
int height(AVLNode* node) {
    return node ? node->height : 0;
}

// Fungsi untuk menghitung balance factor
int getBalance(AVLNode* node) {
    return node ? height(node->left) - height(node->right) : 0;
}

// Fungsi untuk rotasi kanan
AVLNode* rotateRight(AVLNode* y) {
    AVLNode* x = y->left;
    AVLNode* T2 = x->right;
    x->right = y;
    y->left = T2;
    y->height = max(height(y->left), height(y->right)) + 1;
    x->height = max(height(x->left), height(x->right)) + 1;
    return x;
}

// Fungsi untuk rotasi kiri
AVLNode* rotateLeft(AVLNode* x) {
    AVLNode* y = x->right;
    AVLNode* T2 = y->left;
    y->left = x;
    x->right = T2;
    x->height = max(height(x->left), height(x->right)) + 1;
    y->height = max(height(y->left), height(y->right)) + 1;
    return y;
}

// Fungsi untuk membuat node baru
AVLNode* createNode(Book data) {
    AVLNode* node = new AVLNode();
    node->data = data;
    node->left = node->right = nullptr;
    node->height = 1;
    return node;
}

// Fungsi untuk menambahkan buku (insert) ke dalam AVL tree
AVLNode* insert(AVLNode* node, Book data) {
    if (!node) return createNode(data);
    if (data.id < node->data.id) node->left = insert(node->left, data);
    else if (data.id > node->data.id) node->right = insert(node->right, data);
    else return node;  // ID buku sudah ada

    // Update tinggi node saat ini
    node->height = 1 + max(height(node->left), height(node->right));
    
    // Check balance factor
    int balance = getBalance(node);
    
    // Jika tidak seimbang, lakukan rotasi
    if (balance > 1 && data.id < node->left->data.id) return rotateRight(node);
    if (balance < -1 && data.id > node->right->data.id) return rotateLeft(node);
    if (balance > 1 && data.id > node->left->data.id) {
        node->left = rotateLeft(node->left);
        return rotateRight(node);
    }
    if (balance < -1 && data.id < node->right->data.id) {
        node->right = rotateRight(node->right);
        return rotateLeft(node);
    }
    
    return node;
}

// Fungsi untuk mencari node dengan nilai minimum
AVLNode* minValueNode(AVLNode* node) {
    AVLNode* current = node;
    while (current->left != nullptr) current = current->left;
    return current;
}

// Fungsi untuk menghapus buku (delete) dari AVL tree
AVLNode* deleteNode(AVLNode* root, int id) {
    if (!root) return root;
    
    if (id < root->data.id) root->left = deleteNode(root->left, id);
    else if (id > root->data.id) root->right = deleteNode(root->right, id);
    else {
        if (!root->left || !root->right) {
            AVLNode* temp = root->left ? root->left : root->right;
            if (!temp) {
                temp = root;
                root = nullptr;
            } else *root = *temp;
            delete temp;
        } else {
            AVLNode* temp = minValueNode(root->right);
            root->data = temp->data;
            root->right = deleteNode(root->right, temp->data.id);
        }
    }
    
    if (!root) return root;
    root->height = 1 + max(height(root->left), height(root->right));
    int balance = getBalance(root);
    
    if (balance > 1 && getBalance(root->left) >= 0) return rotateRight(root);
    if (balance > 1 && getBalance(root->left) < 0) {
        root->left = rotateLeft(root->left);
        return rotateRight(root);
    }
    if (balance < -1 && getBalance(root->right) <= 0) return rotateLeft(root);
    if (balance < -1 && getBalance(root->right) > 0) {
        root->right = rotateRight(root->right);
        return rotateLeft(root);
    }
    
    return root;
}

// Fungsi untuk menampilkan buku dalam urutan ID (In-order Traversal)
void displayInOrder(AVLNode* root) {
    if (root) {
        displayInOrder(root->left);
        cout << "ID: " << root->data.id << ", Judul: " << root->data.title << endl;
        displayInOrder(root->right);
    }
}

int main() {
    AVLNode* root = nullptr;
    Book book1 = {1, "Pemrograman C++", "John Doe", "Teknologi", 2020, 5};
    Book book2 = {2, "Algoritma dan Struktur Data", "Jane Doe", "Teknologi", 2019, 3};
    Book book3 = {3, "Basis Data", "Alice Smith", "Teknologi", 2018, 2};
    
    // Insert buku
    root = insert(root, book1);
    root = insert(root, book2);
    root = insert(root, book3);
    
    cout << "Daftar Buku dalam Perpustakaan:" << endl;
    displayInOrder(root);
    
    // Delete buku
    root = deleteNode(root, 2);
    cout << "\nDaftar Buku setelah penghapusan ID 2:" << endl;
    displayInOrder(root);
    
    return 0;
}
